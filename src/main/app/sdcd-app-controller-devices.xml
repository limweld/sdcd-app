<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:db="http://www.mulesoft.org/schema/mule/db"
	xmlns:json="http://www.mulesoft.org/schema/mule/json"
	xmlns:ssh="http://www.mulesoft.org/schema/mule/ssh" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ssh http://www.mulesoft.org/schema/mule/ssh/current/mule-ssh.xsd">
	<flow name="reloadServiceControllerFlowCallback">
		<logger message="#['Send Device Task Succesfully']" level="INFO" doc:name="Logger"/>
	</flow>
	<sub-flow name="reloadServiceControllerFlow">
		<json:json-to-object-transformer returnClass="java.util.HashMap" doc:name="JSON to Object"/>
		<set-variable variableName="dataQueryInput" value="#[payload]" doc:name="Payload Variable"/>
		<flow-ref name="validateTokenUserControllerFlow" doc:name="validateTokenUserControllerFlow"/>
		<choice doc:name="Choice">
			<when expression="#[payload != empty]">
				<ssh:send config-ref="SSH-Reload-Config" content="bash appgo_restart" breakLine="true" doc:name="SSH"/>
			</when>
			<otherwise>
				<logger message="#['Send Task Device No Allowed']" level="INFO" doc:name="Logger"/>
			</otherwise>
		</choice>
	</sub-flow>

	<sub-flow name="createDevicesControllerFlow">
		<json:json-to-object-transformer returnClass="java.util.HashMap" doc:name="JSON to Object"/>
		<set-variable variableName="dataQueryInput" value="#[payload]" doc:name="Payload Variable"/>
		<flow-ref name="validateTokenUserControllerFlow" doc:name="validateTokenUserControllerFlow"/>
		<choice doc:name="Choice">
			<when expression="#[payload != empty]">
				<db:insert config-ref="MariaDB_Generic_Database_Configuration" doc:name="Create">
					<db:parameterized-query><![CDATA[insert into devices (
	name,
	ip,
	onDemand,
	protocol,
	port,
	username,
	password,
	details,
	created_at
) values ( 
	#[flowVars.dataQueryInput.name],
	#[flowVars.dataQueryInput.ip],
	#[flowVars.dataQueryInput.onDemand],
	#[flowVars.dataQueryInput.protocol],
	#[flowVars.dataQueryInput.port],
	#[flowVars.dataQueryInput.username],
	#[flowVars.dataQueryInput.password],
	#[flowVars.dataQueryInput.details],
	NOW()
)]]></db:parameterized-query>
				</db:insert>
				<logger message="#['Created Devices Succesfully']" level="INFO" doc:name="Logger"/>
			</when>
			<otherwise>
				<logger message="#['Create Devices No Allowed']" level="INFO" doc:name="Logger"/>
			</otherwise>
		</choice>
	</sub-flow>
	<sub-flow name="readDevicesControllerFlow">
		<json:json-to-object-transformer returnClass="java.util.HashMap" doc:name="JSON to Object"/>
		<set-variable variableName="dataQueryInput" value="#[payload]" doc:name="Payload Variable"/>
		<set-variable variableName="usersEntryFrom" value="#[(flowVars.dataQueryInput.page - 1) * flowVars.dataQueryInput.range]" doc:name="Page From Variable"/>
		<flow-ref name="validateTokenUserControllerFlow" doc:name="validateTokenUserControllerFlow"/>
		<choice doc:name="Choice">
			<when expression="#[payload != empty]">
				<db:select config-ref="MariaDB_Generic_Database_Configuration" doc:name="Read">
					<db:dynamic-query><![CDATA[#["select id, name, ip, onDemand, protocol, port, username, details, created_at, updated_at from devices where " + flowVars.dataQueryInput.field_type + " like " + "'%"+flowVars.dataQueryInput.input_value+"%'" + " limit " + flowVars.usersEntryFrom +","+ flowVars.dataQueryInput.range
]]]></db:dynamic-query>
				</db:select>
				<json:object-to-json-transformer doc:name="Object to JSON"/>
				<logger message="#['Read Devices Succesfully']" level="INFO" doc:name="Logger"/>
			</when>
			<otherwise>
				<logger message="#['Read Devices No Allowed']" level="INFO" doc:name="Logger"/>
			</otherwise>
		</choice>
	</sub-flow>
	<sub-flow name="readDevicesCountControllerFlow">
		<json:json-to-object-transformer returnClass="java.util.HashMap" doc:name="JSON to Object"/>
		<set-variable variableName="dataQueryInput" value="#[payload]" doc:name="Payload Variable"/>
		<flow-ref name="validateTokenUserControllerFlow" doc:name="validateTokenUserControllerFlow"/>
		<choice doc:name="Choice">
			<when expression="#[payload != empty]">
				<db:select config-ref="MariaDB_Generic_Database_Configuration" doc:name="Read">
					<db:dynamic-query><![CDATA[#["select count(*) as total from devices where " + flowVars.dataQueryInput.field_type + " like " + "'%"+flowVars.dataQueryInput.input_value+"%'"]]]></db:dynamic-query>
				</db:select>
				<json:object-to-json-transformer doc:name="Object to JSON"/>
				<logger message="#['Read Devices Succesfully']" level="INFO" doc:name="Logger"/>
			</when>
			<otherwise>
				<logger message="#['Read Devices No Allowed']" level="INFO" doc:name="Logger"/>
			</otherwise>
		</choice>
	</sub-flow>
	<sub-flow name="updateDevicesControllerFlow">
		<json:json-to-object-transformer returnClass="java.util.HashMap" doc:name="JSON to Object"/>
		<set-variable variableName="dataQueryInput" value="#[payload]" doc:name="Payload Variable"/>
		<flow-ref name="validateTokenUserControllerFlow" doc:name="validateTokenUserControllerFlow"/>
		<choice doc:name="Choice">
			<when expression="#[payload != empty &amp;&amp; flowVars.dataPasswordInput != &quot;&quot;]">
				<db:update config-ref="MariaDB_Generic_Database_Configuration" doc:name="Update">
					<db:parameterized-query><![CDATA[UPDATE devices SET 
	ip=#[flowVars.dataQueryInput.ipAddress], 
	onDemand=#[flowVars.dataQueryInput.onDemand], 
	protocol=#[flowVars.dataQueryInput.protocol], 
	port=#[flowVars.dataQueryInput.port], 
	details=#[flowVars.dataQueryInput.details],
	updated_at = NOW()
WHERE 
	name=#[flowVars.dataQueryInput.name]
limit 1]]></db:parameterized-query>
				</db:update>
				<logger message="#['Update Devices Succesfully']" level="INFO" doc:name="Logger"/>
			</when>
			<otherwise>
				<logger message="#['Update Devices No Allowed']" level="INFO" doc:name="Logger"/>
			</otherwise>
		</choice>
	</sub-flow>
		<sub-flow name="updateDevicesPasswordControllerFlow">
		<json:json-to-object-transformer returnClass="java.util.HashMap" doc:name="JSON to Object"/>
		<set-variable variableName="dataQueryInput" value="#[payload]" doc:name="Payload Variable"/>
		<flow-ref name="validateTokenUserControllerFlow" doc:name="validateTokenUserControllerFlow"/>
		<choice doc:name="Choice">
			<when expression="#[payload != empty &amp;&amp; flowVars.dataPasswordInput != &quot;&quot;]">
				<db:update config-ref="MariaDB_Generic_Database_Configuration" doc:name="Update">
					<db:parameterized-query><![CDATA[UPDATE devices SET 
	username=#[flowVars.dataQueryInput.username],
	password=#[flowVars.dataQueryInput.password],
	updated_at = NOW()
WHERE 
	name=#[flowVars.dataQueryInput.name]
limit 1]]></db:parameterized-query>
				</db:update>
				<logger message="#['Update Devices Succesfully']" level="INFO" doc:name="Logger"/>
			</when>
			<otherwise>
				<logger message="#['Update Devices No Allowed']" level="INFO" doc:name="Logger"/>
			</otherwise>
		</choice>
	</sub-flow>
	<sub-flow name="deleteDevicesControllerFlow">
		<json:json-to-object-transformer returnClass="java.util.HashMap" doc:name="JSON to Object"/>
		<set-variable variableName="dataQueryInput" value="#[payload]" doc:name="Payload Variable"/>
		<flow-ref name="validateTokenUserControllerFlow" doc:name="validateTokenUserControllerFlow"/>
		<choice doc:name="Choice">
			<when expression="#[payload != empty]">
				<db:delete config-ref="MariaDB_Generic_Database_Configuration" doc:name="Delete">
					<db:parameterized-query><![CDATA[DELETE FROM devices WHERE name=#[flowVars.dataQueryInput.name] limit 1]]></db:parameterized-query>
				</db:delete>
				<logger message="#['Delete Devices Succesfully']" level="INFO" doc:name="Logger"/>
			</when>
			<otherwise>
				<logger message="#['Delete Devices No Allowed']" level="INFO" doc:name="Logger"/>
			</otherwise>
		</choice>
	</sub-flow>
</mule>
